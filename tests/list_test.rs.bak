fn new_list() -> List<i32> {
    LinkedList {head: None}
}

#[test]
fn test_list_get() {
    let mut list = new_list();
    list.insert(0, 1);
    list.insert(1, 2);
    list.insert(2, 3);

    assert_eq!(list.get(0), Some(&1));
    assert_eq!(list.get(1), Some(&2));
    assert_eq!(list.get(2), Some(&3));
    assert_eq!(list.get(3), None);
}

#[test]
fn test_list_set() {
    let mut list = new_list();
    list.insert(0, 1);
    list.insert(1, 2);
    list.insert(2, 3);

    assert_eq!(list.set(1, 4), Some(2));
    assert_eq!(list.get(1), Some(&4));
}

#[test]
fn test_list_insert() {
    let mut list = new_list();

    list.insert(0, 1);
    list.insert(1, 2);
    list.insert(2, 3);

    assert_eq!(list.size(), 3);
}

#[test]
fn test_list_remove() {
    let mut list = new_list();
    list.insert(0, 1);
    list.insert(1, 2);
    list.insert(2, 3);

    assert_eq!(list.remove(1), Some(2));
    assert_eq!(list.size(), 2);
}

#[test]
fn test_list_size() {
    let list = new_list();
    list.insert(0, 1);
    list.insert(1, 2);
    list.insert(2, 3);

    assert_eq!(list.size(), 3);
}